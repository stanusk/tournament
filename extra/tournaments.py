"""Manage a database of tournaments using the Swiss system of organization."""

import psycopg2


# GENERAL FUNCTIONS


def connect():
    """Connect to the PostgreSQL 'tournaments' database.

    Returns a database connection.
    """
    return psycopg2.connect("dbname=tournaments")


# ADMIN FUNCTIONS
# functions used only during testing - not for production


def a_deleteAllTournaments():
    """Delete all tournaments from table 'tournaments'.

    To be used only by admins for testing purposes as tournaments that are no
    longer active should be marked inactive by changing their status to
    'closed', but never deleted from production environment.
    """
    db = connect()
    c = db.cursor()

    c.execute("DELETE FROM tournaments")

    db.commit()
    db.close()

    print "All tournaments deleted!"


def a_deleteAllPlayers():
    """Delete all players from table 'players'.

    To be used only by admins for testing purposes as players that are no
    longer active should be marked inactive by changing their status to
    'inactive', but never deleted from production environment.
    """
    db = connect()
    c = db.cursor()

    c.execute("DELETE FROM players")

    db.commit()
    db.close()

    print "All players deleted!"


# USER FUNCTIONS


def createNewTournament(name):
    """Add a new tournament to table 'tournaments'.

    New tournament is automatically assigned an id (generated by database) and
    by default gets 'planned' status.

    Args:
        name: Complete name of the tournament (need not be unique).
    """
    db = connect()
    c = db.cursor()

    c.execute("INSERT INTO tournaments (name, status) "
              "VALUES (%s, 'planned')", (name, ))
    c.execute("SELECT id FROM tournaments ORDER BY id DESC")

    tour_id = c.fetchone()[0]

    db.commit()
    db.close()

    print "Tournament %s created with the following id: %s" % (name, tour_id)


def countTournaments(*status):
    """Count tournaments either all or by status.

    Return number of all tournaments if no status is provided, or number of
    tournaments of provided status/es.

    Args:
        status: (optional) Name of each selected status as separate string.

    Returns:
        An integer indicating current number of tournaments of selected status
        or all tournaments in case no status was provided.
    """
    db = connect()
    c = db.cursor()

    if status:
        # tuple is unpacked to strings
        status = [s for s in status]
    else:
        # List of tuples (one for each option from db tourStatus type) is
        # selected from db.
        c.execute("SELECT unnest(enum_range(NULL::tourStatus))")
        # Tuples are unpacked to strings in a list.
        status = [s[0] for s in c.fetchall()]

    # Sum up the count of each selected status to get full count of selection.
    c.execute("SELECT sum(count) FROM v_toursCount "
              "WHERE status::text = ANY (%s)", [status])
    res = c.fetchone()[0]

    db.commit()
    db.close()

    return res


def createNewPlayer(name):
    """Add a new player to table 'players'.

    New player is automatically assigned an id (generated by database) and by
    default gets 'active' status.

    Args:
        name: Full name of the player (need not be unique).
    """
    db = connect()
    c = db.cursor()

    c.execute("INSERT INTO players (name, status) "
              "VALUES (%s, 'active')", (name, ))
    c.execute("SELECT id FROM players ORDER BY id DESC")

    player_id = c.fetchone()[0]

    db.commit()
    db.close()

    print "Player %s created with the following id: %s" % (name, player_id)
