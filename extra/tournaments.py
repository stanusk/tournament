"""Manage a database of tournaments using the Swiss system of organization."""

import psycopg2


# GENERAL FUNCTIONS


def connect():
    """Connect to the PostgreSQL 'tournaments' database.

    Returns a database connection.
    """
    return psycopg2.connect("dbname=tournaments")


# ADMIN FUNCTIONS
# functions used only during testing - not for production


def a_deleteAllTournaments():
    """Delete all tournaments from table 'tournaments'.

    Used only by admins for testing purposes as tournaments that are no longer
    active should be marked inactive by changing their status to 'closed', but
    never deleted from production environment.
    """
    db = connect()
    c = db.cursor()

    c.execute("DELETE FROM tournaments")

    db.commit()
    db.close()

    print "All tournaments deleted!"


def a_deleteAllPlayers():
    """Delete all players from table 'players'.

    Used only by admins for testing purposes as players that are no longer
    active should be marked inactive by changing their status to 'inactive',
    but never deleted from production environment.
    """
    db = connect()
    c = db.cursor()

    c.execute("DELETE FROM players")

    db.commit()
    db.close()

    print "All players deleted!"


# USER FUNCTIONS


def createNewTournament(name):
    """Add a new tournament to table 'tournaments'.

    New tournament is automatically assigned an id (generated by database) and
    by default gets 'planned' status.

    Args:
        name: complete name of the tournament (need not be unique).
    """
    db = connect()
    c = db.cursor()

    c.execute("INSERT INTO tournaments (name, status) "
              "VALUES (%s, 'planned')", (name, ))
    c.execute("SELECT id FROM tournaments ORDER BY id DESC")

    tour_id = c.fetchone()[0]

    db.commit()
    db.close()

    print "Tournament %s created with the following id: %s" % (name, tour_id)


def createNewPlayer(name):
    """Add a new player to table 'players'.

    New player is automatically assigned an id (generated by database) and by
    default gets 'active' status.

    Args:
        name: full name of the player (need not be unique).
    """
    db = connect()
    c = db.cursor()

    c.execute("INSERT INTO players (name, status) "
              "VALUES (%s, 'active')", (name, ))
    c.execute("SELECT id FROM players ORDER BY id DESC")

    player_id = c.fetchone()[0]

    db.commit()
    db.close()

    print "Player %s created with the following id: %s" % (name, player_id)
